% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipe_test.R
\name{pipe_check}
\alias{pipe_check}
\title{Pipe-Friendly Assertion Function}
\usage{
pipe_check(obj, check, expected = TRUE, tolerance = .Machine$double.eps^0.5)
}
\arguments{
\item{obj}{The object being passed through the pipe, typically a `data.frame` or `data.table`.}

\item{check}{The expression to test. For logical tests, this is an expression that
resolves to a logical vector. For object comparisons, this is the object to be
tested against `expected`.}

\item{expected}{The expected value for the `check`. Defaults to `TRUE`.}

\item{tolerance}{Numeric tolerance for `all.equal()` comparisons. Ignored when
`expected = TRUE`.}
}
\value{
Invisibly returns the original input object `obj` if the check is successful.
}
\description{
This function is designed to be used within a `magrittr` (`%>%`) pipeline
to perform a check or test on data. If the check passes, it invisibly
returns the original object, allowing the pipeline to continue. If the
check fails, it throws an informative error and stops execution.
}
\details{
The function is highly efficient for large objects like `data.table`s because
it does not create a copy of the input object (`obj`). It provides clear
error messages by deparsing the expression that failed, making debugging easier.

It operates in two modes:
1.  **Logical Assertion**: If `expected` is `TRUE` (the default), the function
    evaluates `all(check)`. This is useful for verifying conditions like
    `all(my_col > 0)`.
2.  **Object Comparison**: If `expected` is any other value, the function uses
    `all.equal(check, expected)` to compare the two objects, which is ideal
    for checking if a calculation produced a specific numeric vector or object.
}
\examples{
if (require("data.table") && require("magrittr")) {

  DT <- data.table(x = 1:10, y = (1:10) * 2)

  # --- Successful Checks ---

  # 1. A successful logical check
  DT_new <- DT[, z := x + y] \%>\%
    pipe_check(check = all(.$z == .$x * 3)) \%>\%
    .[, z_sqrt := sqrt(z)]

  print(DT_new)

  # 2. A successful object comparison check
  DT \%>\%
    pipe_check(check = .$y, expected = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20))


  # --- Failing Check ---

  # 3. A failing check, wrapped in try() to show the error message
  try({
    DT[, z := x + y] \%>\%
      pipe_check(check = all(.$z < 20))
  })
}
}
\seealso{
`all.equal()`, the `assertr` package.
}
