% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cut_with_bin_labels.R
\name{cut_with_bin_labels}
\alias{cut_with_bin_labels}
\title{\code{cut} using endpoints as bin labels bin labels}
\usage{
cut_with_bin_labels(
  x,
  breaks,
  labels = NULL,
  include.lowest = FALSE,
  right = TRUE,
  dig.lab = 3,
  ordered_result = FALSE,
  ...
)
}
\arguments{
\item{x}{a numeric vector which is to be converted to a factor by
cutting.}

\item{breaks}{either a numeric vector of two or more unique cut
points or a single number (greater than or equal to 2) giving the
number of intervals into which 'x' is to be cut.}

\item{labels}{labels for the levels of the resulting category.  By
default, labels are constructed using '"(a,b]"' interval
notation.  If 'labels = FALSE', simple integer codes are returned
instead of a factor. If 'labels = "left"' then the labels will be
a numeric verctor with the left endpoints. If 'labels = "right"'
then the labels will be a numeric verctor with the right
endpoints.}

\item{include.lowest}{logical, indicating if an 'x[i]' equal to the
lowest (or highest, for 'right = FALSE') 'breaks' value should be
included.}

\item{right}{logical, indicating if the intervals should be closed
on the right (and open on the left) or vice versa. Default is \code{TRUE}}

\item{dig.lab}{integer which is used when labels are not given.  It
determines the number of digits used in formatting the break
numbers.}

\item{...}{further arguments passed to or from other methods.}

\item{order_result}{logical: should the result be an ordered
factor?}
}
\description{
Use endpoints as bin labels with \code{cut}. The only difference between
this function and \code{cut}, is that this function will label the
levels based on the endpoints if \code{labels} are specified as either
"left" or "right". For more information, see \code{cut}
}
\examples{
data(mtcars)
breaks <- seq(from = 0, to = max(mtcars$hp) + 10, by = 10)
data.table(hp = mtcars$hp,
           bin.cut.default = cut(mtcars$hp, breaks = breaks),
           bin.left.endpoint = cut_with_bin_labels(mtcars$hp, breaks = breaks, labels = "left"),
           bin.right.endpoint = cut_with_bin_labels(mtcars$hp, breaks = breaks, labels = "right")
          ) \%>\% print

#Using `right` == FALSE
data.table(hp = mtcars$hp,
           bin.cut.default = cut(mtcars$hp, breaks = breaks, right = FALSE),
           bin.left.endpoint = cut_with_bin_labels(mtcars$hp, breaks = breaks, labels = "left", right = FALSE),
           bin.right.endpoint = cut_with_bin_labels(mtcars$hp, breaks = breaks, labels = "right", right = FALSE)
          ) \%>\% print
}
\seealso{
\code{cut()}, \code{ggplot2::cut_interval()},
  \code{ggplot2::cut_width()}, \code{ggplot2::cut_number()}


}
